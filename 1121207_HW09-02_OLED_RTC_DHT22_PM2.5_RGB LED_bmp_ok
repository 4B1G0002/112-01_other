#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "RTClib.h"
#include "DHTesp.h"

#include <WiFi.h>
#include <WiFiMulti.h>
#include <ArduinoJson.h>
#include <HTTPClient.h>

#define USE_SERIAL Serial
#define WIFI_SSID "Wokwi-GUEST"
#define WIFI_PASSWORD ""
#define WIFI_CHANNEL 6

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
 
// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
 
#define NUMFLAKES     10 // Number of snowflakes in the animation example
 
#define LOGO_HEIGHT   50
#define LOGO_WIDTH    50
//-------------------------------------------------
RTC_DS1307 rtc;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
//-------------------------------------------------
const int DHT_PIN = 23;
DHTesp dhtSensor;
//-------------------------------------------------
int R1=17;
int G1=18;
int BA=19;
//-------------------------------------------------
//-------------------------------------------------
static const unsigned char PROGMEM HEART_bmp[] =
{ 
// '螢幕擷取畫面 2023-12-07 214003', 50x50px
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xc0, 0xfc, 
0xc0, 0xff, 0xfe, 0x00, 0x3f, 0xc0, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xfc, 0x01, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xc0, 0xff, 0xc7, 0xff, 0xff, 0x03, 
0xff, 0xc0, 0xff, 0x81, 0xff, 0xfe, 0x01, 0xff, 0xc0, 0xff, 0x00, 0xff, 0xfe, 0x01, 0xff, 0xc0, 
0xff, 0x00, 0xff, 0xfe, 0x01, 0xff, 0xc0, 0xff, 0x00, 0xff, 0xff, 0x03, 0xff, 0xc0, 0xff, 0x81, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xc0, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0x87, 0xfb, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xdf, 0xfb, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0 };
static const unsigned char PROGMEM HEART_bmp01[] =
{
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xfe, 0x00, 0xff, 0xc0, 0xfe, 0x00, 0xff, 0xfe, 0x00, 0xff, 0xc0, 0xfe, 0x00, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x07, 
0xff, 0xc0, 0xff, 0xe0, 0xff, 0xfe, 0x73, 0xff, 0xc0, 0xff, 0xc6, 0x7f, 0xfc, 0xf9, 0xff, 0xc0, 
0xff, 0xdf, 0x3f, 0xfc, 0xf9, 0xff, 0xc0, 0xff, 0x9f, 0x3f, 0xfc, 0xf9, 0xff, 0xc0, 0xff, 0x9f, 
0x3f, 0xfe, 0xff, 0xff, 0xc0, 0xff, 0xdf, 0xbf, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 
0xc0, 0xff, 0xfd, 0xff, 0xff, 0xef, 0xff, 0xc0, 0xff, 0xfc, 0xff, 0xff, 0xcf, 0xff, 0xc0, 0xff, 
0xfe, 0x3f, 0xff, 0x9f, 0xff, 0xc0, 0xff, 0xff, 0x87, 0xfe, 0x3f, 0xff, 0xc0, 0xff, 0xff, 0xf0, 
0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};
static const unsigned char PROGMEM HEART_bmp02[] = 
{
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xc0, 0xff, 0xf1, 0xff, 0xfc, 0x00, 0xff, 0xc0, 0xfc, 
0x00, 0xff, 0xfe, 0x01, 0xff, 0xc0, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xc0, 0xff, 0xff, 0x7f, 0xfe, 0x79, 
0xff, 0xc0, 0xff, 0x7c, 0xff, 0xff, 0x23, 0xff, 0xc0, 0xff, 0x99, 0xff, 0xff, 0xc7, 0xff, 0xc0, 
0xff, 0xe3, 0xff, 0xff, 0x33, 0xff, 0xc0, 0xff, 0xc9, 0xff, 0xfe, 0x7d, 0xff, 0xc0, 0xff, 0x9e, 
0x7f, 0xff, 0xfe, 0xff, 0xc0, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xfc, 0x0f, 0xbf, 0xdf, 0xff, 0xc0, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};
static const unsigned char PROGMEM HEART_bmp03[] =
{
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xc0, 0xff, 0xf1, 0xff, 0xfc, 0x00, 0xff, 0xc0, 0xfc, 
0x00, 0xff, 0xfe, 0x01, 0xff, 0xc0, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xc0, 0xff, 0xff, 0x7f, 0xfe, 0x79, 
0xff, 0xc0, 0xff, 0x7c, 0xff, 0xff, 0x23, 0xff, 0xc0, 0xff, 0x99, 0xff, 0xff, 0xc7, 0xff, 0xc0, 
0xff, 0xe3, 0xff, 0xff, 0x33, 0xff, 0xc0, 0xff, 0xc9, 0xff, 0xfe, 0x7d, 0xff, 0xc0, 0xff, 0x9e, 
0x7f, 0xff, 0xfe, 0xff, 0xc0, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xfc, 0x0f, 0xbf, 0xdf, 0xff, 0xc0, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};
static const unsigned char PROGMEM HEART_bmp04[]  =
{
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xc0, 0xfc, 0x00, 0xff, 0xfe, 0x00, 0x7f, 0xc0, 0xfc, 
0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 
0xff, 0xc0, 0xff, 0x80, 0xff, 0xff, 0xcf, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xfb, 0xbf, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xf9, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xfc, 0x7f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};
static const unsigned char PROGMEM HEART_bmp05[] =
{
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xc0, 0xff, 
0xfc, 0xff, 0xfc, 0x01, 0xff, 0xc0, 0xff, 0x00, 0x7f, 0xfe, 0x01, 0xff, 0xc0, 0xff, 0x00, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xbf, 0xfc, 0xff, 
0xff, 0xc0, 0xff, 0xf8, 0x3f, 0xfd, 0x01, 0xff, 0xc0, 0xff, 0x03, 0x9f, 0xfd, 0xf9, 0xff, 0xc0, 
0xff, 0xbc, 0xdf, 0xfd, 0x1d, 0xff, 0xc0, 0xff, 0xbc, 0x5f, 0xfd, 0x1d, 0xff, 0xc0, 0xff, 0xbc, 
0xdf, 0xfd, 0xbd, 0xff, 0xc0, 0xff, 0xdf, 0x9f, 0xfe, 0xfb, 0xff, 0xc0, 0xff, 0xcf, 0x3f, 0x0f, 
0x07, 0xff, 0xc0, 0xff, 0xe0, 0xf8, 0xe3, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xe7, 0xfd, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xef, 0xfe, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xdf, 0xfe, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xdf, 0xfe, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xdf, 0xfe, 0x7f, 0xff, 0xc0, 0xff, 0xff, 0xdf, 
0xff, 0x7f, 0xff, 0xc0, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};
static const unsigned char PROGMEM HEART_bmp06[] =
{
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0x00, 0x3f, 0xc0, 0xfe, 0x00, 0x7f, 0xff, 0x00, 0x3f, 0xc0, 0xfe, 0x00, 0x7f, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xc0, 0xff, 0xf7, 0xff, 0xfe, 0x07, 0xff, 0xc0, 
0xff, 0xe0, 0xff, 0xfe, 0x07, 0xff, 0xc0, 0xff, 0xfc, 0x3f, 0xfe, 0x07, 0xff, 0xc0, 0xff, 0xfc, 
0x7f, 0xff, 0x9f, 0xff, 0xc0, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xc0, 0xff, 0xff, 0x9f, 0xfc, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0x8f, 0xfc, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xf8, 0x0f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};
//-------------------------------------------------


void setup() {
  Serial.begin(9600);
    
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3c)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  if (! rtc.begin()) {
    Serial.println("Couldn't find RTC");
    Serial.flush();
    abort();
  }
//-------------------------------------------------
  dhtSensor.setup(DHT_PIN, DHTesp::DHT22);
//-------------------------------------------------
  pinMode(R1, OUTPUT);
  pinMode(G1, OUTPUT);
  pinMode(BA, OUTPUT);
  analogWrite(R1, 0);
  analogWrite(G1, 0);
  analogWrite(BA, 0);
  USE_SERIAL.println();
  USE_SERIAL.println();
   USE_SERIAL.println();
//-------------------------------------------------
  for(uint8_t t = 4; t > 0; t--) {
        USE_SERIAL.printf("[SETUP] WAIT %d...\n", t);
        USE_SERIAL.flush();
        delay(1000);
    }

    WiFi.begin(WIFI_SSID, WIFI_PASSWORD, WIFI_CHANNEL);
    Serial.print("Connecting to WiFi ");
    Serial.print(WIFI_SSID);
    while (WiFi.status() != WL_CONNECTED) {
      delay(100);
      Serial.print(".");
    }
    Serial.println(" Connected!");

    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
    

}
 
void loop() {
  if ((WiFi.status() == WL_CONNECTED)) {

    HTTPClient http;

    USE_SERIAL.print("[HTTP] begin...\n");
    http.begin("https://data.moenv.gov.tw/api/v2/aqx_p_02?api_key=e8dd42e6-9b8b-43f8-991e-b3dee723a52d&limit=1000&sort=datacreationdate%20desc&format=JSON"); // HTTP

    USE_SERIAL.print("[HTTP] GET...\n");
    int httpCode = http.GET();

    if (httpCode > 0) {
      USE_SERIAL.printf("[HTTP] GET... code: %d\n", httpCode);

      if (httpCode == HTTP_CODE_OK) {
        String payload = http.getString();

        DynamicJsonDocument doc(12288);

        DeserializationError error = deserializeJson(doc, payload);

        if (error) {
          Serial.print("deserializeJson() failed: ");
          Serial.println(error.c_str());
          return;
        }

        for (JsonObject field : doc["fields"].as<JsonArray>()) {

          const char *field_id = field["id"];                 // "site", "county", "pm25", "datacreationdate", "itemunit"
          const char *field_type = field["type"];             // "text", "text", "text", "text", "text"
          const char *field_info_label = field["info"]["label"]; // "測站名稱", "縣市名稱", "細懸浮微粒濃度", "資料建置日期", "測項單位"
        }

        const char *resource_id = doc["resource_id"]; // "c1f31192-babd-4105-b880-a4c2e23a3276"

        const char *extras_api_key = doc["__extras"]["api_key"]; // "e8dd42e6-9b8b-43f8-991e-b3dee723a52d"

        bool include_total = doc["include_total"]; // true
        const char *total = doc["total"];           // "78"
        const char *resource_format = doc["resource_format"]; // "object"
        const char *limit = doc["limit"];                     // "1000"
        const char *offset = doc["offset"];                   // "0"

        const char *links_start = doc["_links"]["start"];
        const char *links_next = doc["_links"]["next"];

        for (JsonObject record : doc["records"].as<JsonArray>()) {

          const char *record_site = record["site"];                  // "大城", "富貴角", "麥寮", "關山", "馬公", "金門", "馬祖", "埔里", "復興", ...
          const char *record_county = record["county"];              // "彰化縣", "新北市", "雲林縣", "臺東縣", "澎湖縣", "金門縣", "連江縣", "南投縣", ...
          const char *record_pm25 = record["pm25"];                  // "24", "18", "28", "12", "15", "28", "32", "13", "15", "15", ...
          const char *record_datacreationdate = record["datacreationdate"]; // "2023-12-07 17:00", "2023-12-07 ...
          const char *record_itemunit = record["itemunit"];   

          if (record["site"]=="臺南")
          {
            String s1 =record["site"];
            Serial.print(s1);
            String pa=record["pm25"];
            int p1 = pa.toInt();
            if (p1>=0 && p1<=15.4)
            {
              analogWrite(R1, 0);
              analogWrite(G1, 255);
              analogWrite(BA, 0);
            }
            else if (p1>=15.5 && p1<=35.4)
            {
              analogWrite(R1, 255);
              analogWrite(G1, 255);
              analogWrite(BA, 0);
            }
            else if (p1>=35.5 && p1<=54.4)
            {
              analogWrite(R1, 255);
              analogWrite(G1, 150);
              analogWrite(BA, 0);
            }
            else if (p1>=54.5 && p1<=150.4)
            {
              analogWrite(R1, 255);
              analogWrite(G1, 0);
              analogWrite(BA, 0);
            }
            else if (p1>=150.5 && p1<=250.4)
            {
              analogWrite(R1, 128);
              analogWrite(G1, 0);
              analogWrite(BA, 128);
            }
            else if (p1>=250.5 && p1<=350.4)
            {
              analogWrite(R1, 139);
              analogWrite(G1, 0);
              analogWrite(BA, 0);
            }
            else if (p1>=350.5 && p1<=500.4)
            {
              analogWrite(R1, 139);
              analogWrite(G1, 0);
              analogWrite(BA, 0);
            }
            Serial.print("PM2.5=");
            Serial.print(pa);
            String u1 = record["itemunit"];
            Serial.print(u1);
            Serial.print(",時間");
            String t1=record["datacreationdate"];
            Serial.println(t1);

            TempAndHumidity data = dhtSensor.getTempAndHumidity();
            display.clearDisplay();
            display.setTextSize(1);
            display.setTextColor(1);

            display.setCursor(0,0);
            DateTime now = rtc.now();
            //display.print("Current time: ");
            display.print(now.year(), DEC);
            display.print('/');
            display.print(now.month(), DEC);
            display.print('/');
            display.print(now.day(), DEC);
            display.print(now.hour(), DEC);
            display.print(':');
            display.print(now.minute(), DEC);
            display.print(':');
            display.print(now.second(), DEC);

            display.setCursor(0, 10);
            display.print("Temperature: ");
            display.print(String(data.temperature, 2));
            display.print("C");
            display.setCursor(0, 20);
            display.print("Humidity: ");
            display.print(String(data.humidity, 2));
            display.print("%");

            display.setCursor(0, 30);
            display.print("Tainan");
            display.setCursor(0, 40);
            display.print("PM2.5=");
            display.print(pa);
            display.print(u1);
            display.setCursor(0, 50);
            display.print("TIME:");
            display.print(t1);
            display.display();

            if (p1>=0 && p1<=15.4)
            {
              display.drawBitmap(80,20,HEART_bmp,LOGO_WIDTH,LOGO_HEIGHT,SSD1306_WHITE);
              delay(100);
              display.display();
            }
            else if (p1>=15.5 && p1<=35.4)
            {
              display.drawBitmap(80,20,HEART_bmp01,LOGO_WIDTH,LOGO_HEIGHT,SSD1306_WHITE);
              delay(100);
              display.display();
            }
            else if (p1>=35.5 && p1<=54.4)
            {
              display.drawBitmap(80,20,HEART_bmp02,LOGO_WIDTH,LOGO_HEIGHT,SSD1306_WHITE);
              delay(100);
              display.display();
            }
            else if (p1>=54.5 && p1<=150.4)
            {
              display.drawBitmap(80,20,HEART_bmp03,LOGO_WIDTH,LOGO_HEIGHT,SSD1306_WHITE);
              delay(100);
              display.display();
            }
            else if (p1>=150.5 && p1<=250.4)
            {
              display.drawBitmap(80,20,HEART_bmp04,LOGO_WIDTH,LOGO_HEIGHT,SSD1306_WHITE);
              delay(100);
              display.display();
            }
            else if (p1>=250.5 && p1<=350.4)
            {
              display.drawBitmap(80,20,HEART_bmp05,LOGO_WIDTH,LOGO_HEIGHT,SSD1306_WHITE);
              delay(100);
              display.display();
            }
            else if (p1>=350.5 && p1<=500.4)
            {
              display.drawBitmap(80,20,HEART_bmp06,LOGO_WIDTH,LOGO_HEIGHT,SSD1306_WHITE);
              delay(100);
              display.display();
            }          
            delay(100);
          }
        }
      }
      http.end();
    }
  }
}
